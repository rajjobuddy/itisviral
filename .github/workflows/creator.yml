name: Generate Veo Video

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: 'Prompt to generate video'
        required: true
        type: string

jobs:
  generate-video:
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: gothic-envelope-458808-h6
      LOCATION_ID: us-central1
      API_ENDPOINT: us-central1-aiplatform.googleapis.com
      MODEL_ID: veo-3.0-generate-preview
      OUTPUT_VIDEO: video.mp4

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up jq and curl
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          create_credentials_file: true

      - name: Create request.json
        run: |
          cat <<EOF > request.json
          {
            "endpoint": "projects/${PROJECT_ID}/locations/${LOCATION_ID}/publishers/google/models/${MODEL_ID}",
            "instances": [
              {
                "prompt": "${{ github.event.inputs.prompt }}"
              }
            ],
            "parameters": {
              "aspectRatio": "16:9",
              "sampleCount": 1,
              "durationSeconds": "8",
              "personGeneration": "allow_adult",
              "addWatermark": true,
              "includeRaiReason": true,
              "generateAudio": true
            }
          }
          EOF

      - name: Start video generation (predictLongRunning)
        id: predict
        run: |
          RESPONSE=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $(gcloud auth print-access-token)" \
            "https://${API_ENDPOINT}/v1/projects/${PROJECT_ID}/locations/${LOCATION_ID}/publishers/google/models/${MODEL_ID}:predictLongRunning" \
            -d @request.json)
          echo "$RESPONSE" > response.json
          OPERATION_ID=$(jq -r .name response.json)
          echo "operation_id=$OPERATION_ID" >> $GITHUB_OUTPUT
          
      - name: Poll for operation completion
        id: poll
        run: |
          OP_NAME="${{ steps.predict.outputs.operation_id }}"
          echo "Polling for completion of $OP_NAME"

          for i in {1..60}; do
            echo '{
          "operationName": "'"$OP_NAME"'"
          }' > fetch.json

            RESPONSE=$(curl -s -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $(gcloud auth print-access-token)" \
              "https://${API_ENDPOINT}/v1/projects/${PROJECT_ID}/locations/${LOCATION_ID}/publishers/google/models/${MODEL_ID}:fetchPredictOperation" \
              -d @fetch.json)

            echo "$RESPONSE" > fetch_response.json
            DONE=$(jq .done fetch_response.json)
            if [[ "$DONE" == "true" ]]; then
              echo "Operation completed"
              break
            fi
            echo "Not done yet, sleeping..."
            sleep 10
          done

          if [[ "$DONE" != "true" ]]; then
            echo "Timeout waiting for video generation"
            exit 1
          fi

      - name: Extract and decode video
        run: |
          VIDEO_BASE64=$(jq -r '.response.videos[0].bytesBase64Encoded' fetch_response.json)
          if [ -z "$VIDEO_BASE64" ] || [ "$VIDEO_BASE64" == "null" ]; then
            echo "No base64 video data found"
            cat fetch_response.json
            exit 1
          fi
          echo "$VIDEO_BASE64" | base64 -d > "${OUTPUT_VIDEO}"

      - name: Upload video artifact
        uses: actions/upload-artifact@v4
        with:
          name: generated-video
          path: ${{ env.OUTPUT_VIDEO }}
